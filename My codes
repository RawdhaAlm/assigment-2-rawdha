from datetime import date

class EBook:
    """
    Represents an EBook with details such as title, author, publication date, genre, and price.
    Provides methods to retrieve and update book information.
    """
    
    def __init__(self, title, author, publication_date, genre, price):
        """
        Initializes the EBook with title, author, publication date, genre, and price.
        """
        self._title = title
        self._author = author
        self._publication_date = publication_date
        self._genre = genre
        self._price = price

    # Getters
    def get_title(self):
        """Returns the title of the ebook."""
        return self._title

    def get_author(self):
        """Returns the author of the ebook."""
        return self._author

    def get_publication_date(self):
        """Returns the publication date of the ebook."""
        return self._publication_date

    def get_genre(self):
        """Returns the genre of the ebook."""
        return self._genre

    def get_price(self):
        """Returns the price of the ebook."""
        return self._price

    # Setters
    def set_title(self, title):
        """Sets a new title for the ebook."""
        self._title = title

    def set_author(self, author):
        """Sets a new author for the ebook."""
        self._author = author

    def set_publication_date(self, publication_date):
        """Sets a new publication date for the ebook."""
        self._publication_date = publication_date

    def set_genre(self, genre):
        """Sets a new genre for the ebook."""
        self._genre = genre

    def set_price(self, price):
        """Sets a new price for the ebook."""
        self._price = price

    # Method to get details of the book
    def get_details(self):
        """Returns a formatted string containing details of the ebook."""
        return f"Title: {self._title}, Author: {self._author}, " \
               f"Publication Date: {self._publication_date}, Genre: {self._genre}, Price: ${self._price:.2f}"

    # Method to update the price of the book
    def update_price(self, new_price):
        """
        Updates the price of the ebook.
        """
        self._price = new_price

    # String representation
    def __str__(self):
        """Returns the string representation of the ebook's details."""
        return self.get_details()


class ShoppingCart:
    """
    Represents a shopping cart that can contain multiple EBook instances.
    Demonstrates an aggregation relationship with the EBook class.
    """
    
    def __init__(self):
        self._ebooks = []

    def add_ebook(self, ebook):
        """Adds an EBook to the shopping cart."""
        self._ebooks.append(ebook)

    def remove_ebook(self, ebook):
        """Removes an EBook from the shopping cart."""
        if ebook in self._ebooks:
            self._ebooks.remove(ebook)

    def get_total_price(self):
        """Calculates the total price of all e-books in the cart."""
        return sum(ebook.get_price() for ebook in self._ebooks)

    def list_ebooks(self):
        """Returns details of all e-books in the shopping cart."""
        return [str(ebook) for ebook in self._ebooks]

    def __str__(self):
        """Returns a formatted list of ebooks in the cart with total price."""
        return f"EBooks in Cart:\n" + "\n".join(self.list_ebooks()) + f"\nTotal Price: ${self.get_total_price():.2f}"


# Example usage
if __name__ == "__main__":
    # Creating an instance of EBook
    ebook = EBook("The Woman in White", "Wilkie Collins", date(1859, 11, 26), "Mystery", 15.99)
    
    # Display initial details using __str__ method
    print("Initial EBook Details:")
    print(ebook)

    pass  # Placeholder for any additional setup if required

    # Using setters to modify the ebook's title and price
    ebook.set_title("The Woman in White (Annotated Edition)")
    ebook.update_price(12.99)

    # Display updated details after modifications
    print("\nUpdated EBook Details After Using Setters:")
    print(ebook)

    # Displaying each attribute separately using getters
    print("\nDisplaying EBook Details Using Getters:")
    print("Title:", ebook.get_title())
    print("Author:", ebook.get_author())
    print("Publication Date:", ebook.get_publication_date())
    print("Genre:", ebook.get_genre())
    print("Price:", ebook.get_price())
    
    pass  # Another placeholder if further operations are needed

    # Creating a ShoppingCart and adding ebooks to it
    cart = ShoppingCart()
    cart.add_ebook(ebook)
    cart.add_ebook(EBook("Dracula", "Bram Stoker", date(1897, 5, 26), "Horror", 10.99))

    # Displaying cart details
    print("\nShopping Cart Details:")
    print(cart)






from datetime import date


class Discount:
    """
    Represents a discount with details such as ID, description, and discount percentage.
    """

    def __init__(self, discount_id, description, discount_percentage):
        """
        Initializes the Discount with an ID, description, and discount percentage.

        Parameters:
        discount_id (int): The ID of the discount.
        description (str): A description of the discount.
        discount_percentage (float): The percentage of the discount.
        """
        self._discount_id = discount_id
        self._description = description
        self._discount_percentage = discount_percentage

    # Getters
    def get_discount_id(self):
        return self._discount_id

    def get_description(self):
        return self._description

    def get_discount_percentage(self):
        return self._discount_percentage

    # Setters
    def set_discount_id(self, discount_id):
        self._discount_id = discount_id

    def set_description(self, description):
        self._description = description

    def set_discount_percentage(self, discount_percentage):
        self._discount_percentage = discount_percentage

    # String representation for easy printing of discount details
    def __str__(self):
        return f"Discount ID: {self._discount_id}, Description: {self._description}, " \
               f"Discount Percentage: {self._discount_percentage}%"


from datetime import date

class Customer:
    """
    Represents a customer with details such as name, email, contact number, loyalty member status, and address.
    """
    
    def __init__(self, name, email, contact_number, loyalty_member, address):
        """
        Initializes a customer with specified name, email, contact number, loyalty status, and address.
        
        Parameters:
        name (str): Customer's name.
        email (str): Customer's email.
        contact_number (str): Customer's contact number.
        loyalty_member (bool): Whether the customer is a loyalty program member.
        address (str): Customer's address.
        """
        self._name = name
        self._email = email
        self._contact_number = contact_number
        self._loyalty_member = loyalty_member
        self._address = address

    # Getters
    def get_name(self):
        return self._name

    def get_email(self):
        return self._email

    def get_contact_number(self):
        return self._contact_number

    def is_loyalty_member(self):
        return self._loyalty_member

    def get_address(self):
        return self._address

    # Setters
    def set_name(self, name):
        self._name = name

    def set_email(self, email):
        self._email = email

    def set_contact_number(self, contact_number):
        self._contact_number = contact_number

    def set_loyalty_member(self, loyalty_member):
        self._loyalty_member = loyalty_member

    def set_address(self, address):
        self._address = address

    def __str__(self):
        return f"Customer: {self._name}, Email: {self._email}, Loyalty Member: {self._loyalty_member}"

class EBook:
    """
    Represents an eBook with details like title, author, publication date, genre, and price.
    """

    def __init__(self, title, author, publication_date, genre, price):
        self._title = title
        self._author = author
        self._publication_date = publication_date
        self._genre = genre
        self._price = price

    def get_price(self):
        return self._price

    def __str__(self):
        return f"Title: {self._title}, Author: {self._author}, Price: ${self._price:.2f}"

class ShoppingCart:
    """
    Represents a shopping cart containing eBooks, associated with a specific customer.
    """

    def __init__(self, customer):
        """
        Initializes the shopping cart for a customer.
        
        Parameters:
        customer (Customer): The customer who owns this shopping cart.
        """
        self._customer = customer
        self._eBooks = []
        self._total_price = 0.0
        self._item_count = 0

    # Add eBook to the cart
    def add_ebook(self, ebook):
        """
        Adds an eBook to the shopping cart and updates the total price and item count.

        Parameters:
        ebook (EBook): The eBook to be added to the cart.
        """
        self._eBooks.append(ebook)
        self._total_price += ebook.get_price()
        self._item_count += 1

    # Remove eBook from the cart
    def remove_ebook(self, ebook):
        """
        Removes an eBook from the shopping cart if it exists, updating the total price and item count.

        Parameters:
        ebook (EBook): The eBook to be removed from the cart.
        """
        if ebook in self._eBooks:
            self._eBooks.remove(ebook)
            self._total_price -= ebook.get_price()
            self._item_count -= 1

    # Get total price of the cart
    def get_total_price(self):
        return self._total_price

    # Set total price using a setter
    def set_total_price(self, total_price):
        self._total_price = total_price

    # Display cart details
    def get_cart_details(self):
        """
        Returns a summary of the shopping cart contents.
        """
        cart_contents = ", ".join([str(ebook) for ebook in self._eBooks])
        return f"Cart contains: {cart_contents}\nTotal Price: ${self._total_price:.2f}, Items Count: {self._item_count}"

    # Updating the cart using setters
    def update_cart(self, ebook):
        """Updates the cart by adding a new eBook and recalculating the total price and item count."""
        self.add_ebook(ebook)
        pass  # Placeholder for additional logic if needed

    # String representation for easy printing
    def __str__(self):
        return f"{self._customer}\n{self.get_cart_details()}"

# Example Usage
if __name__ == "__main__":
    # Create a customer instance
    customer = Customer("Rawdha", "rawdha256@gmail.com", "0554788002", True, "24 Al Abal St")

    # Create a shopping cart for the customer (composition relationship)
    cart = ShoppingCart(customer)

    # Create some eBook instances
    ebook1 = EBook("Book One", "Author A", date(2021, 5, 21), "Fiction", 9.99)
    ebook2 = EBook("Book Two", "Author B", date(2020, 3, 14), "Non-Fiction", 12.99)

    # Add eBooks to the cart
    cart.add_ebook(ebook1)
    cart.add_ebook(ebook2)

    # Display cart details
    print("Initial Cart Details:")
    print(cart)

    pass  # Placeholder for additional initialization if needed

    # Update the cart by removing an eBook and displaying updated details
    cart.remove_ebook(ebook1)
    print("\nUpdated Cart Details After Removing an eBook:")
    print(cart)

    # Displaying each attribute using getters
    print("\nDisplaying Cart Details Using Getters:")
    print("Total Price:", cart.get_total_price())
    print("Customer Info:", cart._customer)
    pass  # Placeholder for further operations if required

    # Update details using setters
    print("\nUpdating Cart Details Using Setters:")
    cart.set_total_price(50.00)
    print("Updated Total Price:", cart.get_total_price())
    
    # Display cart details using getters after update
    print("\nDisplaying Updated Cart Details Using Getters:")
    print("Total Price:", cart.get_total_price())
    print("Customer Info:", cart._customer)


