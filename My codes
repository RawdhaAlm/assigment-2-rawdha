from datetime import date

class EBook:
    """
    Represents an EBook with details such as title, author, publication date, genre, and price.
    Provides methods to retrieve and update book information.
    """
    
    def __init__(self, title, author, publication_date, genre, price):
        """
        Initializes the EBook with title, author, publication date, genre, and price.
        """
        self._title = title
        self._author = author
        self._publication_date = publication_date
        self._genre = genre
        self._price = price

    # Getters
    def get_title(self):
        """Returns the title of the ebook."""
        return self._title

    def get_author(self):
        """Returns the author of the ebook."""
        return self._author

    def get_publication_date(self):
        """Returns the publication date of the ebook."""
        return self._publication_date

    def get_genre(self):
        """Returns the genre of the ebook."""
        return self._genre

    def get_price(self):
        """Returns the price of the ebook."""
        return self._price

    # Setters
    def set_title(self, title):
        """Sets a new title for the ebook."""
        self._title = title

    def set_author(self, author):
        """Sets a new author for the ebook."""
        self._author = author

    def set_publication_date(self, publication_date):
        """Sets a new publication date for the ebook."""
        self._publication_date = publication_date

    def set_genre(self, genre):
        """Sets a new genre for the ebook."""
        self._genre = genre

    def set_price(self, price):
        """Sets a new price for the ebook."""
        self._price = price

    # Method to get details of the book
    def get_details(self):
        """Returns a formatted string containing details of the ebook."""
        return f"Title: {self._title}, Author: {self._author}, " \
               f"Publication Date: {self._publication_date}, Genre: {self._genre}, Price: ${self._price:.2f}"

    # Method to update the price of the book
    def update_price(self, new_price):
        """
        Updates the price of the ebook.
        """
        self._price = new_price

    # String representation
    def __str__(self):
        """Returns the string representation of the ebook's details."""
        return self.get_details()


class ShoppingCart:
    """
    Represents a shopping cart that can contain multiple EBook instances.
    Demonstrates an aggregation relationship with the EBook class.
    """
    
    def __init__(self):
        self._ebooks = []

    def add_ebook(self, ebook):
        """Adds an EBook to the shopping cart."""
        self._ebooks.append(ebook)

    def remove_ebook(self, ebook):
        """Removes an EBook from the shopping cart."""
        if ebook in self._ebooks:
            self._ebooks.remove(ebook)

    def get_total_price(self):
        """Calculates the total price of all e-books in the cart."""
        return sum(ebook.get_price() for ebook in self._ebooks)

    def list_ebooks(self):
        """Returns details of all e-books in the shopping cart."""
        return [str(ebook) for ebook in self._ebooks]

    def __str__(self):
        """Returns a formatted list of ebooks in the cart with total price."""
        return f"EBooks in Cart:\n" + "\n".join(self.list_ebooks()) + f"\nTotal Price: ${self.get_total_price():.2f}"


# Example usage
if __name__ == "__main__":
    # Creating an instance of EBook
    ebook = EBook("The Woman in White", "Wilkie Collins", date(1859, 11, 26), "Mystery", 15.99)
    
    # Display initial details using __str__ method
    print("Initial EBook Details:")
    print(ebook)

    pass  # Placeholder for any additional setup if required

    # Using setters to modify the ebook's title and price
    ebook.set_title("The Woman in White (Annotated Edition)")
    ebook.update_price(12.99)

    # Display updated details after modifications
    print("\nUpdated EBook Details After Using Setters:")
    print(ebook)

    # Displaying each attribute separately using getters
    print("\nDisplaying EBook Details Using Getters:")
    print("Title:", ebook.get_title())
    print("Author:", ebook.get_author())
    print("Publication Date:", ebook.get_publication_date())
    print("Genre:", ebook.get_genre())
    print("Price:", ebook.get_price())
    
    pass  # Another placeholder if further operations are needed

    # Creating a ShoppingCart and adding ebooks to it
    cart = ShoppingCart()
    cart.add_ebook(ebook)
    cart.add_ebook(EBook("Dracula", "Bram Stoker", date(1897, 5, 26), "Horror", 10.99))

    # Displaying cart details
    print("\nShopping Cart Details:")
    print(cart)
